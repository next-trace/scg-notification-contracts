name: scg-contracts-ci

# This workflow runs the CI pipeline for the SCG Contracts repository
# It includes building, testing, linting, security checks, and protobuf generation
# Following DRY principles, it uses the local ./scg script for security checks and protobuf generation

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'

# Cancel in-progress runs when a new workflow with the same ref is triggered
# This prevents redundant workflow runs and saves CI resources
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Setup job to avoid redundant setup in other jobs
  # This job defines the Go version to use across all jobs
  setup:
    name: Setup
    runs-on: ubuntu-latest
    outputs:
      go-version: ${{ steps.go-version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract Go version from scg script
        id: go-version
        run: |
          GO_VERSION=$(grep "GO_VERSION=" scg | cut -d'"' -f2)
          echo "Using Go version: ${GO_VERSION}"
          echo "version=${GO_VERSION}" >> $GITHUB_OUTPUT

  changes:
    name: Detect changed paths
    runs-on: ubuntu-latest
    outputs:
      proto: ${{ steps.filter.outputs.proto }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          filters: |
            proto:
              - 'proto/**'
              - 'buf.yaml'
              - 'buf.gen.yaml'
              - '.buf/**'

  build:
    name: Build
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ needs.setup.outputs.go-version }}
          cache: true

      # Cache build artifacts to speed up subsequent runs
      # This reduces build times by reusing previously built packages
      - name: Cache build artifacts
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-build-${{ hashFiles('**/go.sum') }}-${{ hashFiles('**/*.go') }}
          restore-keys: |
            ${{ runner.os }}-go-build-${{ hashFiles('**/go.sum') }}-
            ${{ runner.os }}-go-build-

      # Compile the code to ensure it builds successfully
      # For a protobuf-only project, this might not build much code
      - name: Build
        run: go build -v ./...

  # Test job runs tests with race detection and generates coverage reports
  # For a protobuf-only project, there might not be many tests to run
  test:
    name: Test (Go ${{ matrix.go-version }})
    needs: [setup, build]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version:
          - ${{ needs.setup.outputs.go-version }}
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
          cache: true

      # Reuse build cache from the build job to speed up test execution
      - name: Cache build artifacts
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-build-${{ hashFiles('**/go.sum') }}-${{ hashFiles('**/*.go') }}
          restore-keys: |
            ${{ runner.os }}-go-build-${{ hashFiles('**/go.sum') }}-
            ${{ runner.os }}-go-build-

      # Run tests with race detection and parallelism
      # The -race flag detects race conditions
      # The -parallel flag runs tests in parallel for faster execution
      - name: Test
        run: go test -race -v -parallel 4 -coverprofile=coverage.txt -covermode=atomic ./...

      # Upload coverage report as an artifact for later analysis
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.txt

  # Lint job runs in parallel with test to check code quality
  # It uses golangci-lint to enforce coding standards and catch potential issues
  lint:
    name: Lint
    needs: [setup, build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ needs.setup.outputs.go-version }}
          cache: true

      # Reuse build cache from the build job to speed up linting
      - name: Cache build artifacts
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-build-${{ hashFiles('**/go.sum') }}-${{ hashFiles('**/*.go') }}
          restore-keys: |
            ${{ runner.os }}-go-build-${{ hashFiles('**/go.sum') }}-
            ${{ runner.os }}-go-build-

      # Cache golangci-lint cache to speed up subsequent runs
      # This significantly reduces linting time on repeated runs
      - name: Cache golangci-lint cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/golangci-lint
          key: ${{ runner.os }}-golangci-lint-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-golangci-lint-

      # Run golangci-lint with appropriate timeout and concurrency settings
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v7
        with:
          version: latest
          install-mode: goinstall
          args: --timeout=5m --concurrency=4

  # Security check job runs in parallel with test and lint
  # It scans the codebase for security vulnerabilities using govulncheck and gosec
  security:
    name: Security Check
    needs: [setup, build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ needs.setup.outputs.go-version }}
          cache: true

      # Reuse build cache from the build job to speed up security checks
      - name: Cache build artifacts
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-build-${{ hashFiles('**/go.sum') }}-${{ hashFiles('**/*.go') }}
          restore-keys: |
            ${{ runner.os }}-go-build-${{ hashFiles('**/go.sum') }}-
            ${{ runner.os }}-go-build-

      # Cache security tools to speed up subsequent runs
      # This reduces installation time for security tools
      - name: Cache security tools
        uses: actions/cache@v4
        with:
          path: |
            ~/go/bin
          key: ${{ runner.os }}-security-tools-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-security-tools-

      # Run security checks using the local script
      # This follows DRY principles by reusing the security check logic from the local script
      - name: Run security checks
        run: |
          # Install security tools
          go install golang.org/x/vuln/cmd/govulncheck@latest
          go install github.com/securego/gosec/v2/cmd/gosec@latest

          # Run the security checks using the local script
          # The script handles the output and exit codes appropriately
          ./scg security

  # Protobuf generation job
  # This job generates Go code from Protobuf definitions and verifies it's up to date
  protobuf:
    name: Protobuf Generation
    needs: [setup]
    runs-on: ubuntu-latest
    # Only run this job when relevant files have changed
    if: |
      github.event_name == 'push' ||
      (github.event_name == 'pull_request' && (
        contains(github.event.pull_request.changed_files, 'proto/') ||
        contains(github.event.pull_request.changed_files, 'buf.yaml') ||
        contains(github.event.pull_request.changed_files, 'buf.gen.yaml') ||
        contains(github.event.pull_request.changed_files, '.buf/')
      ))
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history needed for breaking change detection

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ needs.setup.outputs.go-version }}
          cache: true

      # Reuse build cache from the build job to speed up protobuf generation
      - name: Cache build artifacts
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-build-${{ hashFiles('**/go.sum') }}-${{ hashFiles('**/*.go') }}
          restore-keys: |
            ${{ runner.os }}-go-build-${{ hashFiles('**/go.sum') }}-
            ${{ runner.os }}-go-build-
        continue-on-error: true

      - name: Cache protobuf tools
        uses: actions/cache@v4
        with:
          path: |
            ~/go/bin
          key: ${{ runner.os }}-protobuf-tools-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-protobuf-tools-
        continue-on-error: true

      - name: Install and run proto generation
        run: |
          # Use Buf managed plugins; no need to install protoc-gen-go binaries
          # Pin Buf to a version that supports managed remote plugin syntax
          go install github.com/bufbuild/buf/cmd/buf@v1.47.2

          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH

          ./scg proto-gen

      - name: Verify generated code
        run: |
          if [[ -n $(git status --porcelain) ]]; then
            echo "Generated code is not up to date. Please run './scg proto-gen' locally and commit the changes."
            git status
            exit 1
          fi

  summary:
    name: CI Summary
    needs: [build, test, lint, security, protobuf]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate summary
        run: |
          echo "# CI Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Job Status" >> $GITHUB_STEP_SUMMARY
          echo "- Build: ${{ needs.build.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Test: ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Lint: ${{ needs.lint.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Security: ${{ needs.security.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Protobuf: ${{ needs.protobuf.result }}" >> $GITHUB_STEP_SUMMARY

      - name: Check job status
        if: ${{ needs.build.result != 'success' || needs.test.result != 'success' || needs.lint.result != 'success' || needs.security.result != 'success' || (needs.protobuf.result != 'success' && needs.protobuf.result != 'skipped') }}
        run: |
          echo "One or more jobs failed. Please check the job logs for details."
          exit 1
