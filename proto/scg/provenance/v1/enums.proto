syntax = "proto3";

package proto.scg.notification.provenance.enums;

option go_package = "github.com/next-trace/scg-notification-contracts/gen/go/proto/scg/provenance/v1;provenancev1";

// ProvenanceRecordStatus represents the status of a provenance record
enum ProvenanceRecordStatus {
  PROVENANCE_RECORD_STATUS_UNSPECIFIED = 0;
  PROVENANCE_RECORD_STATUS_CREATED = 1;
  PROVENANCE_RECORD_STATUS_VERIFIED = 2;
  PROVENANCE_RECORD_STATUS_DISPUTED = 3;
  PROVENANCE_RECORD_STATUS_AMENDED = 4;
  PROVENANCE_RECORD_STATUS_INVALIDATED = 5;
}

// ProvenanceRecordType represents the type of provenance record
enum ProvenanceRecordType {
  PROVENANCE_RECORD_TYPE_UNSPECIFIED = 0;
  PROVENANCE_RECORD_TYPE_ORIGIN = 1;
  PROVENANCE_RECORD_TYPE_PROCESSING = 2;
  PROVENANCE_RECORD_TYPE_TRANSFORMATION = 3;
  PROVENANCE_RECORD_TYPE_TRANSPORTATION = 4;
  PROVENANCE_RECORD_TYPE_STORAGE = 5;
  PROVENANCE_RECORD_TYPE_INSPECTION = 6;
  PROVENANCE_RECORD_TYPE_CERTIFICATION = 7;
  PROVENANCE_RECORD_TYPE_OWNERSHIP_TRANSFER = 8;
}

// ProvenanceVerificationMethod represents the method used to verify provenance
enum ProvenanceVerificationMethod {
  PROVENANCE_VERIFICATION_METHOD_UNSPECIFIED = 0;
  PROVENANCE_VERIFICATION_METHOD_DOCUMENT = 1;
  PROVENANCE_VERIFICATION_METHOD_DIGITAL_SIGNATURE = 2;
  PROVENANCE_VERIFICATION_METHOD_BLOCKCHAIN = 3;
  PROVENANCE_VERIFICATION_METHOD_THIRD_PARTY = 4;
  PROVENANCE_VERIFICATION_METHOD_PHYSICAL_INSPECTION = 5;
  PROVENANCE_VERIFICATION_METHOD_LABORATORY_TESTING = 6;
}

// ProvenanceDisputeReason represents the reason for disputing a provenance record
enum ProvenanceDisputeReason {
  PROVENANCE_DISPUTE_REASON_UNSPECIFIED = 0;
  PROVENANCE_DISPUTE_REASON_INACCURATE_INFORMATION = 1;
  PROVENANCE_DISPUTE_REASON_MISSING_INFORMATION = 2;
  PROVENANCE_DISPUTE_REASON_FRAUDULENT_CLAIM = 3;
  PROVENANCE_DISPUTE_REASON_UNAUTHORIZED_MODIFICATION = 4;
  PROVENANCE_DISPUTE_REASON_CONFLICTING_RECORDS = 5;
  PROVENANCE_DISPUTE_REASON_OTHER = 6;
}