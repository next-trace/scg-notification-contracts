// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: proto/scg/provenance/v1/events.proto

package provenancev1

import (
	v1 "github.com/next-trace/scg-notification-contracts/gen/go/proto/scg/shared/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ProvenanceRecordCreatedNotification is sent when a new provenance record is created
type ProvenanceRecordCreatedNotification struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Base               *v1.NotificationEvent  `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	ProvenanceRecordId string                 `protobuf:"bytes,2,opt,name=provenance_record_id,proto3" json:"provenance_record_id,omitempty"`
	EntityId           string                 `protobuf:"bytes,3,opt,name=entity_id,proto3" json:"entity_id,omitempty"`
	EntityType         string                 `protobuf:"bytes,4,opt,name=entity_type,proto3" json:"entity_type,omitempty"`
	RecordType         ProvenanceRecordType   `protobuf:"varint,5,opt,name=record_type,proto3,enum=proto.scg.notification.provenance.enums.ProvenanceRecordType" json:"record_type,omitempty"`
	Location           string                 `protobuf:"bytes,6,opt,name=location,proto3" json:"location,omitempty"`
	ActorId            string                 `protobuf:"bytes,7,opt,name=actor_id,proto3" json:"actor_id,omitempty"`
	ActorName          string                 `protobuf:"bytes,8,opt,name=actor_name,proto3" json:"actor_name,omitempty"`
	OrganizationId     string                 `protobuf:"bytes,9,opt,name=organization_id,proto3" json:"organization_id,omitempty"`
	OrganizationName   string                 `protobuf:"bytes,10,opt,name=organization_name,proto3" json:"organization_name,omitempty"`
	Description        string                 `protobuf:"bytes,11,opt,name=description,proto3" json:"description,omitempty"`
	OccurredAt         *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=occurred_at,proto3" json:"occurred_at,omitempty"`
	RecordedAt         *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=recorded_at,proto3" json:"recorded_at,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ProvenanceRecordCreatedNotification) Reset() {
	*x = ProvenanceRecordCreatedNotification{}
	mi := &file_proto_scg_provenance_v1_events_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProvenanceRecordCreatedNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProvenanceRecordCreatedNotification) ProtoMessage() {}

func (x *ProvenanceRecordCreatedNotification) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scg_provenance_v1_events_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProvenanceRecordCreatedNotification.ProtoReflect.Descriptor instead.
func (*ProvenanceRecordCreatedNotification) Descriptor() ([]byte, []int) {
	return file_proto_scg_provenance_v1_events_proto_rawDescGZIP(), []int{0}
}

func (x *ProvenanceRecordCreatedNotification) GetBase() *v1.NotificationEvent {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *ProvenanceRecordCreatedNotification) GetProvenanceRecordId() string {
	if x != nil {
		return x.ProvenanceRecordId
	}
	return ""
}

func (x *ProvenanceRecordCreatedNotification) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

func (x *ProvenanceRecordCreatedNotification) GetEntityType() string {
	if x != nil {
		return x.EntityType
	}
	return ""
}

func (x *ProvenanceRecordCreatedNotification) GetRecordType() ProvenanceRecordType {
	if x != nil {
		return x.RecordType
	}
	return ProvenanceRecordType_PROVENANCE_RECORD_TYPE_UNSPECIFIED
}

func (x *ProvenanceRecordCreatedNotification) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *ProvenanceRecordCreatedNotification) GetActorId() string {
	if x != nil {
		return x.ActorId
	}
	return ""
}

func (x *ProvenanceRecordCreatedNotification) GetActorName() string {
	if x != nil {
		return x.ActorName
	}
	return ""
}

func (x *ProvenanceRecordCreatedNotification) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *ProvenanceRecordCreatedNotification) GetOrganizationName() string {
	if x != nil {
		return x.OrganizationName
	}
	return ""
}

func (x *ProvenanceRecordCreatedNotification) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ProvenanceRecordCreatedNotification) GetOccurredAt() *timestamppb.Timestamp {
	if x != nil {
		return x.OccurredAt
	}
	return nil
}

func (x *ProvenanceRecordCreatedNotification) GetRecordedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.RecordedAt
	}
	return nil
}

// ProvenanceRecordVerifiedNotification is sent when a provenance record is verified
type ProvenanceRecordVerifiedNotification struct {
	state              protoimpl.MessageState       `protogen:"open.v1"`
	Base               *v1.NotificationEvent        `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	ProvenanceRecordId string                       `protobuf:"bytes,2,opt,name=provenance_record_id,proto3" json:"provenance_record_id,omitempty"`
	EntityId           string                       `protobuf:"bytes,3,opt,name=entity_id,proto3" json:"entity_id,omitempty"`
	EntityType         string                       `protobuf:"bytes,4,opt,name=entity_type,proto3" json:"entity_type,omitempty"`
	RecordType         ProvenanceRecordType         `protobuf:"varint,5,opt,name=record_type,proto3,enum=proto.scg.notification.provenance.enums.ProvenanceRecordType" json:"record_type,omitempty"`
	VerificationMethod ProvenanceVerificationMethod `protobuf:"varint,6,opt,name=verification_method,proto3,enum=proto.scg.notification.provenance.enums.ProvenanceVerificationMethod" json:"verification_method,omitempty"`
	VerifierId         string                       `protobuf:"bytes,7,opt,name=verifier_id,proto3" json:"verifier_id,omitempty"`
	VerifierName       string                       `protobuf:"bytes,8,opt,name=verifier_name,proto3" json:"verifier_name,omitempty"`
	VerificationNotes  string                       `protobuf:"bytes,9,opt,name=verification_notes,proto3" json:"verification_notes,omitempty"`
	VerifiedAt         *timestamppb.Timestamp       `protobuf:"bytes,10,opt,name=verified_at,proto3" json:"verified_at,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ProvenanceRecordVerifiedNotification) Reset() {
	*x = ProvenanceRecordVerifiedNotification{}
	mi := &file_proto_scg_provenance_v1_events_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProvenanceRecordVerifiedNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProvenanceRecordVerifiedNotification) ProtoMessage() {}

func (x *ProvenanceRecordVerifiedNotification) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scg_provenance_v1_events_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProvenanceRecordVerifiedNotification.ProtoReflect.Descriptor instead.
func (*ProvenanceRecordVerifiedNotification) Descriptor() ([]byte, []int) {
	return file_proto_scg_provenance_v1_events_proto_rawDescGZIP(), []int{1}
}

func (x *ProvenanceRecordVerifiedNotification) GetBase() *v1.NotificationEvent {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *ProvenanceRecordVerifiedNotification) GetProvenanceRecordId() string {
	if x != nil {
		return x.ProvenanceRecordId
	}
	return ""
}

func (x *ProvenanceRecordVerifiedNotification) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

func (x *ProvenanceRecordVerifiedNotification) GetEntityType() string {
	if x != nil {
		return x.EntityType
	}
	return ""
}

func (x *ProvenanceRecordVerifiedNotification) GetRecordType() ProvenanceRecordType {
	if x != nil {
		return x.RecordType
	}
	return ProvenanceRecordType_PROVENANCE_RECORD_TYPE_UNSPECIFIED
}

func (x *ProvenanceRecordVerifiedNotification) GetVerificationMethod() ProvenanceVerificationMethod {
	if x != nil {
		return x.VerificationMethod
	}
	return ProvenanceVerificationMethod_PROVENANCE_VERIFICATION_METHOD_UNSPECIFIED
}

func (x *ProvenanceRecordVerifiedNotification) GetVerifierId() string {
	if x != nil {
		return x.VerifierId
	}
	return ""
}

func (x *ProvenanceRecordVerifiedNotification) GetVerifierName() string {
	if x != nil {
		return x.VerifierName
	}
	return ""
}

func (x *ProvenanceRecordVerifiedNotification) GetVerificationNotes() string {
	if x != nil {
		return x.VerificationNotes
	}
	return ""
}

func (x *ProvenanceRecordVerifiedNotification) GetVerifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.VerifiedAt
	}
	return nil
}

// ProvenanceRecordDisputedNotification is sent when a provenance record is disputed
type ProvenanceRecordDisputedNotification struct {
	state                     protoimpl.MessageState  `protogen:"open.v1"`
	Base                      *v1.NotificationEvent   `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	DisputeId                 string                  `protobuf:"bytes,2,opt,name=dispute_id,proto3" json:"dispute_id,omitempty"`
	ProvenanceRecordId        string                  `protobuf:"bytes,3,opt,name=provenance_record_id,proto3" json:"provenance_record_id,omitempty"`
	EntityId                  string                  `protobuf:"bytes,4,opt,name=entity_id,proto3" json:"entity_id,omitempty"`
	EntityType                string                  `protobuf:"bytes,5,opt,name=entity_type,proto3" json:"entity_type,omitempty"`
	DisputantId               string                  `protobuf:"bytes,6,opt,name=disputant_id,proto3" json:"disputant_id,omitempty"`
	DisputantName             string                  `protobuf:"bytes,7,opt,name=disputant_name,proto3" json:"disputant_name,omitempty"`
	DisputantOrganizationId   string                  `protobuf:"bytes,8,opt,name=disputant_organization_id,proto3" json:"disputant_organization_id,omitempty"`
	DisputantOrganizationName string                  `protobuf:"bytes,9,opt,name=disputant_organization_name,proto3" json:"disputant_organization_name,omitempty"`
	Reason                    ProvenanceDisputeReason `protobuf:"varint,10,opt,name=reason,proto3,enum=proto.scg.notification.provenance.enums.ProvenanceDisputeReason" json:"reason,omitempty"`
	Description               string                  `protobuf:"bytes,11,opt,name=description,proto3" json:"description,omitempty"`
	DisputedAt                *timestamppb.Timestamp  `protobuf:"bytes,12,opt,name=disputed_at,proto3" json:"disputed_at,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *ProvenanceRecordDisputedNotification) Reset() {
	*x = ProvenanceRecordDisputedNotification{}
	mi := &file_proto_scg_provenance_v1_events_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProvenanceRecordDisputedNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProvenanceRecordDisputedNotification) ProtoMessage() {}

func (x *ProvenanceRecordDisputedNotification) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scg_provenance_v1_events_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProvenanceRecordDisputedNotification.ProtoReflect.Descriptor instead.
func (*ProvenanceRecordDisputedNotification) Descriptor() ([]byte, []int) {
	return file_proto_scg_provenance_v1_events_proto_rawDescGZIP(), []int{2}
}

func (x *ProvenanceRecordDisputedNotification) GetBase() *v1.NotificationEvent {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *ProvenanceRecordDisputedNotification) GetDisputeId() string {
	if x != nil {
		return x.DisputeId
	}
	return ""
}

func (x *ProvenanceRecordDisputedNotification) GetProvenanceRecordId() string {
	if x != nil {
		return x.ProvenanceRecordId
	}
	return ""
}

func (x *ProvenanceRecordDisputedNotification) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

func (x *ProvenanceRecordDisputedNotification) GetEntityType() string {
	if x != nil {
		return x.EntityType
	}
	return ""
}

func (x *ProvenanceRecordDisputedNotification) GetDisputantId() string {
	if x != nil {
		return x.DisputantId
	}
	return ""
}

func (x *ProvenanceRecordDisputedNotification) GetDisputantName() string {
	if x != nil {
		return x.DisputantName
	}
	return ""
}

func (x *ProvenanceRecordDisputedNotification) GetDisputantOrganizationId() string {
	if x != nil {
		return x.DisputantOrganizationId
	}
	return ""
}

func (x *ProvenanceRecordDisputedNotification) GetDisputantOrganizationName() string {
	if x != nil {
		return x.DisputantOrganizationName
	}
	return ""
}

func (x *ProvenanceRecordDisputedNotification) GetReason() ProvenanceDisputeReason {
	if x != nil {
		return x.Reason
	}
	return ProvenanceDisputeReason_PROVENANCE_DISPUTE_REASON_UNSPECIFIED
}

func (x *ProvenanceRecordDisputedNotification) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ProvenanceRecordDisputedNotification) GetDisputedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DisputedAt
	}
	return nil
}

// ProvenanceDisputeResolvedNotification is sent when a provenance dispute is resolved
type ProvenanceDisputeResolvedNotification struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Base               *v1.NotificationEvent  `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	DisputeId          string                 `protobuf:"bytes,2,opt,name=dispute_id,proto3" json:"dispute_id,omitempty"`
	ProvenanceRecordId string                 `protobuf:"bytes,3,opt,name=provenance_record_id,proto3" json:"provenance_record_id,omitempty"`
	EntityId           string                 `protobuf:"bytes,4,opt,name=entity_id,proto3" json:"entity_id,omitempty"`
	EntityType         string                 `protobuf:"bytes,5,opt,name=entity_type,proto3" json:"entity_type,omitempty"`
	Resolution         string                 `protobuf:"bytes,6,opt,name=resolution,proto3" json:"resolution,omitempty"`
	ResolverId         string                 `protobuf:"bytes,7,opt,name=resolver_id,proto3" json:"resolver_id,omitempty"`
	ResolverName       string                 `protobuf:"bytes,8,opt,name=resolver_name,proto3" json:"resolver_name,omitempty"`
	ResolvedAt         *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=resolved_at,proto3" json:"resolved_at,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ProvenanceDisputeResolvedNotification) Reset() {
	*x = ProvenanceDisputeResolvedNotification{}
	mi := &file_proto_scg_provenance_v1_events_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProvenanceDisputeResolvedNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProvenanceDisputeResolvedNotification) ProtoMessage() {}

func (x *ProvenanceDisputeResolvedNotification) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scg_provenance_v1_events_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProvenanceDisputeResolvedNotification.ProtoReflect.Descriptor instead.
func (*ProvenanceDisputeResolvedNotification) Descriptor() ([]byte, []int) {
	return file_proto_scg_provenance_v1_events_proto_rawDescGZIP(), []int{3}
}

func (x *ProvenanceDisputeResolvedNotification) GetBase() *v1.NotificationEvent {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *ProvenanceDisputeResolvedNotification) GetDisputeId() string {
	if x != nil {
		return x.DisputeId
	}
	return ""
}

func (x *ProvenanceDisputeResolvedNotification) GetProvenanceRecordId() string {
	if x != nil {
		return x.ProvenanceRecordId
	}
	return ""
}

func (x *ProvenanceDisputeResolvedNotification) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

func (x *ProvenanceDisputeResolvedNotification) GetEntityType() string {
	if x != nil {
		return x.EntityType
	}
	return ""
}

func (x *ProvenanceDisputeResolvedNotification) GetResolution() string {
	if x != nil {
		return x.Resolution
	}
	return ""
}

func (x *ProvenanceDisputeResolvedNotification) GetResolverId() string {
	if x != nil {
		return x.ResolverId
	}
	return ""
}

func (x *ProvenanceDisputeResolvedNotification) GetResolverName() string {
	if x != nil {
		return x.ResolverName
	}
	return ""
}

func (x *ProvenanceDisputeResolvedNotification) GetResolvedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ResolvedAt
	}
	return nil
}

// ProvenanceChainCompletedNotification is sent when a provenance chain is completed
type ProvenanceChainCompletedNotification struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Base              *v1.NotificationEvent  `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	ProvenanceChainId string                 `protobuf:"bytes,2,opt,name=provenance_chain_id,proto3" json:"provenance_chain_id,omitempty"`
	EntityId          string                 `protobuf:"bytes,3,opt,name=entity_id,proto3" json:"entity_id,omitempty"`
	EntityType        string                 `protobuf:"bytes,4,opt,name=entity_type,proto3" json:"entity_type,omitempty"`
	RecordCount       int32                  `protobuf:"varint,5,opt,name=record_count,proto3" json:"record_count,omitempty"`
	IsVerified        bool                   `protobuf:"varint,6,opt,name=is_verified,proto3" json:"is_verified,omitempty"`
	CompletedAt       *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=completed_at,proto3" json:"completed_at,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ProvenanceChainCompletedNotification) Reset() {
	*x = ProvenanceChainCompletedNotification{}
	mi := &file_proto_scg_provenance_v1_events_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProvenanceChainCompletedNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProvenanceChainCompletedNotification) ProtoMessage() {}

func (x *ProvenanceChainCompletedNotification) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scg_provenance_v1_events_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProvenanceChainCompletedNotification.ProtoReflect.Descriptor instead.
func (*ProvenanceChainCompletedNotification) Descriptor() ([]byte, []int) {
	return file_proto_scg_provenance_v1_events_proto_rawDescGZIP(), []int{4}
}

func (x *ProvenanceChainCompletedNotification) GetBase() *v1.NotificationEvent {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *ProvenanceChainCompletedNotification) GetProvenanceChainId() string {
	if x != nil {
		return x.ProvenanceChainId
	}
	return ""
}

func (x *ProvenanceChainCompletedNotification) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

func (x *ProvenanceChainCompletedNotification) GetEntityType() string {
	if x != nil {
		return x.EntityType
	}
	return ""
}

func (x *ProvenanceChainCompletedNotification) GetRecordCount() int32 {
	if x != nil {
		return x.RecordCount
	}
	return 0
}

func (x *ProvenanceChainCompletedNotification) GetIsVerified() bool {
	if x != nil {
		return x.IsVerified
	}
	return false
}

func (x *ProvenanceChainCompletedNotification) GetCompletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CompletedAt
	}
	return nil
}

// ProvenanceCertificationIssuedNotification is sent when a provenance certification is issued
type ProvenanceCertificationIssuedNotification struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Base              *v1.NotificationEvent  `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	CertificationId   string                 `protobuf:"bytes,2,opt,name=certification_id,proto3" json:"certification_id,omitempty"`
	EntityId          string                 `protobuf:"bytes,3,opt,name=entity_id,proto3" json:"entity_id,omitempty"`
	EntityType        string                 `protobuf:"bytes,4,opt,name=entity_type,proto3" json:"entity_type,omitempty"`
	CertificationType string                 `protobuf:"bytes,5,opt,name=certification_type,proto3" json:"certification_type,omitempty"`
	CertificationName string                 `protobuf:"bytes,6,opt,name=certification_name,proto3" json:"certification_name,omitempty"`
	IssuerId          string                 `protobuf:"bytes,7,opt,name=issuer_id,proto3" json:"issuer_id,omitempty"`
	IssuerName        string                 `protobuf:"bytes,8,opt,name=issuer_name,proto3" json:"issuer_name,omitempty"`
	IssuedAt          *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=issued_at,proto3" json:"issued_at,omitempty"`
	ValidUntil        *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=valid_until,proto3" json:"valid_until,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ProvenanceCertificationIssuedNotification) Reset() {
	*x = ProvenanceCertificationIssuedNotification{}
	mi := &file_proto_scg_provenance_v1_events_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProvenanceCertificationIssuedNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProvenanceCertificationIssuedNotification) ProtoMessage() {}

func (x *ProvenanceCertificationIssuedNotification) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scg_provenance_v1_events_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProvenanceCertificationIssuedNotification.ProtoReflect.Descriptor instead.
func (*ProvenanceCertificationIssuedNotification) Descriptor() ([]byte, []int) {
	return file_proto_scg_provenance_v1_events_proto_rawDescGZIP(), []int{5}
}

func (x *ProvenanceCertificationIssuedNotification) GetBase() *v1.NotificationEvent {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *ProvenanceCertificationIssuedNotification) GetCertificationId() string {
	if x != nil {
		return x.CertificationId
	}
	return ""
}

func (x *ProvenanceCertificationIssuedNotification) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

func (x *ProvenanceCertificationIssuedNotification) GetEntityType() string {
	if x != nil {
		return x.EntityType
	}
	return ""
}

func (x *ProvenanceCertificationIssuedNotification) GetCertificationType() string {
	if x != nil {
		return x.CertificationType
	}
	return ""
}

func (x *ProvenanceCertificationIssuedNotification) GetCertificationName() string {
	if x != nil {
		return x.CertificationName
	}
	return ""
}

func (x *ProvenanceCertificationIssuedNotification) GetIssuerId() string {
	if x != nil {
		return x.IssuerId
	}
	return ""
}

func (x *ProvenanceCertificationIssuedNotification) GetIssuerName() string {
	if x != nil {
		return x.IssuerName
	}
	return ""
}

func (x *ProvenanceCertificationIssuedNotification) GetIssuedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.IssuedAt
	}
	return nil
}

func (x *ProvenanceCertificationIssuedNotification) GetValidUntil() *timestamppb.Timestamp {
	if x != nil {
		return x.ValidUntil
	}
	return nil
}

// ProvenanceCertificationExpiringNotification is sent when a provenance certification is about to expire
type ProvenanceCertificationExpiringNotification struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Base                *v1.NotificationEvent  `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	CertificationId     string                 `protobuf:"bytes,2,opt,name=certification_id,proto3" json:"certification_id,omitempty"`
	EntityId            string                 `protobuf:"bytes,3,opt,name=entity_id,proto3" json:"entity_id,omitempty"`
	EntityType          string                 `protobuf:"bytes,4,opt,name=entity_type,proto3" json:"entity_type,omitempty"`
	CertificationType   string                 `protobuf:"bytes,5,opt,name=certification_type,proto3" json:"certification_type,omitempty"`
	CertificationName   string                 `protobuf:"bytes,6,opt,name=certification_name,proto3" json:"certification_name,omitempty"`
	IssuerId            string                 `protobuf:"bytes,7,opt,name=issuer_id,proto3" json:"issuer_id,omitempty"`
	IssuerName          string                 `protobuf:"bytes,8,opt,name=issuer_name,proto3" json:"issuer_name,omitempty"`
	ValidUntil          *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=valid_until,proto3" json:"valid_until,omitempty"`
	DaysUntilExpiration int32                  `protobuf:"varint,10,opt,name=days_until_expiration,proto3" json:"days_until_expiration,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ProvenanceCertificationExpiringNotification) Reset() {
	*x = ProvenanceCertificationExpiringNotification{}
	mi := &file_proto_scg_provenance_v1_events_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProvenanceCertificationExpiringNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProvenanceCertificationExpiringNotification) ProtoMessage() {}

func (x *ProvenanceCertificationExpiringNotification) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scg_provenance_v1_events_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProvenanceCertificationExpiringNotification.ProtoReflect.Descriptor instead.
func (*ProvenanceCertificationExpiringNotification) Descriptor() ([]byte, []int) {
	return file_proto_scg_provenance_v1_events_proto_rawDescGZIP(), []int{6}
}

func (x *ProvenanceCertificationExpiringNotification) GetBase() *v1.NotificationEvent {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *ProvenanceCertificationExpiringNotification) GetCertificationId() string {
	if x != nil {
		return x.CertificationId
	}
	return ""
}

func (x *ProvenanceCertificationExpiringNotification) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

func (x *ProvenanceCertificationExpiringNotification) GetEntityType() string {
	if x != nil {
		return x.EntityType
	}
	return ""
}

func (x *ProvenanceCertificationExpiringNotification) GetCertificationType() string {
	if x != nil {
		return x.CertificationType
	}
	return ""
}

func (x *ProvenanceCertificationExpiringNotification) GetCertificationName() string {
	if x != nil {
		return x.CertificationName
	}
	return ""
}

func (x *ProvenanceCertificationExpiringNotification) GetIssuerId() string {
	if x != nil {
		return x.IssuerId
	}
	return ""
}

func (x *ProvenanceCertificationExpiringNotification) GetIssuerName() string {
	if x != nil {
		return x.IssuerName
	}
	return ""
}

func (x *ProvenanceCertificationExpiringNotification) GetValidUntil() *timestamppb.Timestamp {
	if x != nil {
		return x.ValidUntil
	}
	return nil
}

func (x *ProvenanceCertificationExpiringNotification) GetDaysUntilExpiration() int32 {
	if x != nil {
		return x.DaysUntilExpiration
	}
	return 0
}

var File_proto_scg_provenance_v1_events_proto protoreflect.FileDescriptor

const file_proto_scg_provenance_v1_events_proto_rawDesc = "" +
	"\n" +
	"$proto/scg/provenance/v1/events.proto\x12(proto.scg.notification.provenance.events\x1a proto/scg/shared/v1/events.proto\x1a#proto/scg/provenance/v1/enums.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"\x95\x05\n" +
	"#ProvenanceRecordCreatedNotification\x12K\n" +
	"\x04base\x18\x01 \x01(\v27.proto.scg.notification.shared.events.NotificationEventR\x04base\x122\n" +
	"\x14provenance_record_id\x18\x02 \x01(\tR\x14provenance_record_id\x12\x1c\n" +
	"\tentity_id\x18\x03 \x01(\tR\tentity_id\x12 \n" +
	"\ventity_type\x18\x04 \x01(\tR\ventity_type\x12_\n" +
	"\vrecord_type\x18\x05 \x01(\x0e2=.proto.scg.notification.provenance.enums.ProvenanceRecordTypeR\vrecord_type\x12\x1a\n" +
	"\blocation\x18\x06 \x01(\tR\blocation\x12\x1a\n" +
	"\bactor_id\x18\a \x01(\tR\bactor_id\x12\x1e\n" +
	"\n" +
	"actor_name\x18\b \x01(\tR\n" +
	"actor_name\x12(\n" +
	"\x0forganization_id\x18\t \x01(\tR\x0forganization_id\x12,\n" +
	"\x11organization_name\x18\n" +
	" \x01(\tR\x11organization_name\x12 \n" +
	"\vdescription\x18\v \x01(\tR\vdescription\x12<\n" +
	"\voccurred_at\x18\f \x01(\v2\x1a.google.protobuf.TimestampR\voccurred_at\x12<\n" +
	"\vrecorded_at\x18\r \x01(\v2\x1a.google.protobuf.TimestampR\vrecorded_at\"\xf7\x04\n" +
	"$ProvenanceRecordVerifiedNotification\x12K\n" +
	"\x04base\x18\x01 \x01(\v27.proto.scg.notification.shared.events.NotificationEventR\x04base\x122\n" +
	"\x14provenance_record_id\x18\x02 \x01(\tR\x14provenance_record_id\x12\x1c\n" +
	"\tentity_id\x18\x03 \x01(\tR\tentity_id\x12 \n" +
	"\ventity_type\x18\x04 \x01(\tR\ventity_type\x12_\n" +
	"\vrecord_type\x18\x05 \x01(\x0e2=.proto.scg.notification.provenance.enums.ProvenanceRecordTypeR\vrecord_type\x12w\n" +
	"\x13verification_method\x18\x06 \x01(\x0e2E.proto.scg.notification.provenance.enums.ProvenanceVerificationMethodR\x13verification_method\x12 \n" +
	"\vverifier_id\x18\a \x01(\tR\vverifier_id\x12$\n" +
	"\rverifier_name\x18\b \x01(\tR\rverifier_name\x12.\n" +
	"\x12verification_notes\x18\t \x01(\tR\x12verification_notes\x12<\n" +
	"\vverified_at\x18\n" +
	" \x01(\v2\x1a.google.protobuf.TimestampR\vverified_at\"\x8d\x05\n" +
	"$ProvenanceRecordDisputedNotification\x12K\n" +
	"\x04base\x18\x01 \x01(\v27.proto.scg.notification.shared.events.NotificationEventR\x04base\x12\x1e\n" +
	"\n" +
	"dispute_id\x18\x02 \x01(\tR\n" +
	"dispute_id\x122\n" +
	"\x14provenance_record_id\x18\x03 \x01(\tR\x14provenance_record_id\x12\x1c\n" +
	"\tentity_id\x18\x04 \x01(\tR\tentity_id\x12 \n" +
	"\ventity_type\x18\x05 \x01(\tR\ventity_type\x12\"\n" +
	"\fdisputant_id\x18\x06 \x01(\tR\fdisputant_id\x12&\n" +
	"\x0edisputant_name\x18\a \x01(\tR\x0edisputant_name\x12<\n" +
	"\x19disputant_organization_id\x18\b \x01(\tR\x19disputant_organization_id\x12@\n" +
	"\x1bdisputant_organization_name\x18\t \x01(\tR\x1bdisputant_organization_name\x12X\n" +
	"\x06reason\x18\n" +
	" \x01(\x0e2@.proto.scg.notification.provenance.enums.ProvenanceDisputeReasonR\x06reason\x12 \n" +
	"\vdescription\x18\v \x01(\tR\vdescription\x12<\n" +
	"\vdisputed_at\x18\f \x01(\v2\x1a.google.protobuf.TimestampR\vdisputed_at\"\xae\x03\n" +
	"%ProvenanceDisputeResolvedNotification\x12K\n" +
	"\x04base\x18\x01 \x01(\v27.proto.scg.notification.shared.events.NotificationEventR\x04base\x12\x1e\n" +
	"\n" +
	"dispute_id\x18\x02 \x01(\tR\n" +
	"dispute_id\x122\n" +
	"\x14provenance_record_id\x18\x03 \x01(\tR\x14provenance_record_id\x12\x1c\n" +
	"\tentity_id\x18\x04 \x01(\tR\tentity_id\x12 \n" +
	"\ventity_type\x18\x05 \x01(\tR\ventity_type\x12\x1e\n" +
	"\n" +
	"resolution\x18\x06 \x01(\tR\n" +
	"resolution\x12 \n" +
	"\vresolver_id\x18\a \x01(\tR\vresolver_id\x12$\n" +
	"\rresolver_name\x18\b \x01(\tR\rresolver_name\x12<\n" +
	"\vresolved_at\x18\t \x01(\v2\x1a.google.protobuf.TimestampR\vresolved_at\"\xeb\x02\n" +
	"$ProvenanceChainCompletedNotification\x12K\n" +
	"\x04base\x18\x01 \x01(\v27.proto.scg.notification.shared.events.NotificationEventR\x04base\x120\n" +
	"\x13provenance_chain_id\x18\x02 \x01(\tR\x13provenance_chain_id\x12\x1c\n" +
	"\tentity_id\x18\x03 \x01(\tR\tentity_id\x12 \n" +
	"\ventity_type\x18\x04 \x01(\tR\ventity_type\x12\"\n" +
	"\frecord_count\x18\x05 \x01(\x05R\frecord_count\x12 \n" +
	"\vis_verified\x18\x06 \x01(\bR\vis_verified\x12>\n" +
	"\fcompleted_at\x18\a \x01(\v2\x1a.google.protobuf.TimestampR\fcompleted_at\"\xfc\x03\n" +
	")ProvenanceCertificationIssuedNotification\x12K\n" +
	"\x04base\x18\x01 \x01(\v27.proto.scg.notification.shared.events.NotificationEventR\x04base\x12*\n" +
	"\x10certification_id\x18\x02 \x01(\tR\x10certification_id\x12\x1c\n" +
	"\tentity_id\x18\x03 \x01(\tR\tentity_id\x12 \n" +
	"\ventity_type\x18\x04 \x01(\tR\ventity_type\x12.\n" +
	"\x12certification_type\x18\x05 \x01(\tR\x12certification_type\x12.\n" +
	"\x12certification_name\x18\x06 \x01(\tR\x12certification_name\x12\x1c\n" +
	"\tissuer_id\x18\a \x01(\tR\tissuer_id\x12 \n" +
	"\vissuer_name\x18\b \x01(\tR\vissuer_name\x128\n" +
	"\tissued_at\x18\t \x01(\v2\x1a.google.protobuf.TimestampR\tissued_at\x12<\n" +
	"\vvalid_until\x18\n" +
	" \x01(\v2\x1a.google.protobuf.TimestampR\vvalid_until\"\xfa\x03\n" +
	"+ProvenanceCertificationExpiringNotification\x12K\n" +
	"\x04base\x18\x01 \x01(\v27.proto.scg.notification.shared.events.NotificationEventR\x04base\x12*\n" +
	"\x10certification_id\x18\x02 \x01(\tR\x10certification_id\x12\x1c\n" +
	"\tentity_id\x18\x03 \x01(\tR\tentity_id\x12 \n" +
	"\ventity_type\x18\x04 \x01(\tR\ventity_type\x12.\n" +
	"\x12certification_type\x18\x05 \x01(\tR\x12certification_type\x12.\n" +
	"\x12certification_name\x18\x06 \x01(\tR\x12certification_name\x12\x1c\n" +
	"\tissuer_id\x18\a \x01(\tR\tissuer_id\x12 \n" +
	"\vissuer_name\x18\b \x01(\tR\vissuer_name\x12<\n" +
	"\vvalid_until\x18\t \x01(\v2\x1a.google.protobuf.TimestampR\vvalid_until\x124\n" +
	"\x15days_until_expiration\x18\n" +
	" \x01(\x05R\x15days_until_expirationB^Z\\github.com/next-trace/scg-notification-contracts/gen/go/proto/scg/provenance/v1;provenancev1b\x06proto3"

var (
	file_proto_scg_provenance_v1_events_proto_rawDescOnce sync.Once
	file_proto_scg_provenance_v1_events_proto_rawDescData []byte
)

func file_proto_scg_provenance_v1_events_proto_rawDescGZIP() []byte {
	file_proto_scg_provenance_v1_events_proto_rawDescOnce.Do(func() {
		file_proto_scg_provenance_v1_events_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_scg_provenance_v1_events_proto_rawDesc), len(file_proto_scg_provenance_v1_events_proto_rawDesc)))
	})
	return file_proto_scg_provenance_v1_events_proto_rawDescData
}

var file_proto_scg_provenance_v1_events_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_proto_scg_provenance_v1_events_proto_goTypes = []any{
	(*ProvenanceRecordCreatedNotification)(nil),         // 0: proto.scg.notification.provenance.events.ProvenanceRecordCreatedNotification
	(*ProvenanceRecordVerifiedNotification)(nil),        // 1: proto.scg.notification.provenance.events.ProvenanceRecordVerifiedNotification
	(*ProvenanceRecordDisputedNotification)(nil),        // 2: proto.scg.notification.provenance.events.ProvenanceRecordDisputedNotification
	(*ProvenanceDisputeResolvedNotification)(nil),       // 3: proto.scg.notification.provenance.events.ProvenanceDisputeResolvedNotification
	(*ProvenanceChainCompletedNotification)(nil),        // 4: proto.scg.notification.provenance.events.ProvenanceChainCompletedNotification
	(*ProvenanceCertificationIssuedNotification)(nil),   // 5: proto.scg.notification.provenance.events.ProvenanceCertificationIssuedNotification
	(*ProvenanceCertificationExpiringNotification)(nil), // 6: proto.scg.notification.provenance.events.ProvenanceCertificationExpiringNotification
	(*v1.NotificationEvent)(nil),                        // 7: proto.scg.notification.shared.events.NotificationEvent
	(ProvenanceRecordType)(0),                           // 8: proto.scg.notification.provenance.enums.ProvenanceRecordType
	(*timestamppb.Timestamp)(nil),                       // 9: google.protobuf.Timestamp
	(ProvenanceVerificationMethod)(0),                   // 10: proto.scg.notification.provenance.enums.ProvenanceVerificationMethod
	(ProvenanceDisputeReason)(0),                        // 11: proto.scg.notification.provenance.enums.ProvenanceDisputeReason
}
var file_proto_scg_provenance_v1_events_proto_depIdxs = []int32{
	7,  // 0: proto.scg.notification.provenance.events.ProvenanceRecordCreatedNotification.base:type_name -> proto.scg.notification.shared.events.NotificationEvent
	8,  // 1: proto.scg.notification.provenance.events.ProvenanceRecordCreatedNotification.record_type:type_name -> proto.scg.notification.provenance.enums.ProvenanceRecordType
	9,  // 2: proto.scg.notification.provenance.events.ProvenanceRecordCreatedNotification.occurred_at:type_name -> google.protobuf.Timestamp
	9,  // 3: proto.scg.notification.provenance.events.ProvenanceRecordCreatedNotification.recorded_at:type_name -> google.protobuf.Timestamp
	7,  // 4: proto.scg.notification.provenance.events.ProvenanceRecordVerifiedNotification.base:type_name -> proto.scg.notification.shared.events.NotificationEvent
	8,  // 5: proto.scg.notification.provenance.events.ProvenanceRecordVerifiedNotification.record_type:type_name -> proto.scg.notification.provenance.enums.ProvenanceRecordType
	10, // 6: proto.scg.notification.provenance.events.ProvenanceRecordVerifiedNotification.verification_method:type_name -> proto.scg.notification.provenance.enums.ProvenanceVerificationMethod
	9,  // 7: proto.scg.notification.provenance.events.ProvenanceRecordVerifiedNotification.verified_at:type_name -> google.protobuf.Timestamp
	7,  // 8: proto.scg.notification.provenance.events.ProvenanceRecordDisputedNotification.base:type_name -> proto.scg.notification.shared.events.NotificationEvent
	11, // 9: proto.scg.notification.provenance.events.ProvenanceRecordDisputedNotification.reason:type_name -> proto.scg.notification.provenance.enums.ProvenanceDisputeReason
	9,  // 10: proto.scg.notification.provenance.events.ProvenanceRecordDisputedNotification.disputed_at:type_name -> google.protobuf.Timestamp
	7,  // 11: proto.scg.notification.provenance.events.ProvenanceDisputeResolvedNotification.base:type_name -> proto.scg.notification.shared.events.NotificationEvent
	9,  // 12: proto.scg.notification.provenance.events.ProvenanceDisputeResolvedNotification.resolved_at:type_name -> google.protobuf.Timestamp
	7,  // 13: proto.scg.notification.provenance.events.ProvenanceChainCompletedNotification.base:type_name -> proto.scg.notification.shared.events.NotificationEvent
	9,  // 14: proto.scg.notification.provenance.events.ProvenanceChainCompletedNotification.completed_at:type_name -> google.protobuf.Timestamp
	7,  // 15: proto.scg.notification.provenance.events.ProvenanceCertificationIssuedNotification.base:type_name -> proto.scg.notification.shared.events.NotificationEvent
	9,  // 16: proto.scg.notification.provenance.events.ProvenanceCertificationIssuedNotification.issued_at:type_name -> google.protobuf.Timestamp
	9,  // 17: proto.scg.notification.provenance.events.ProvenanceCertificationIssuedNotification.valid_until:type_name -> google.protobuf.Timestamp
	7,  // 18: proto.scg.notification.provenance.events.ProvenanceCertificationExpiringNotification.base:type_name -> proto.scg.notification.shared.events.NotificationEvent
	9,  // 19: proto.scg.notification.provenance.events.ProvenanceCertificationExpiringNotification.valid_until:type_name -> google.protobuf.Timestamp
	20, // [20:20] is the sub-list for method output_type
	20, // [20:20] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_proto_scg_provenance_v1_events_proto_init() }
func file_proto_scg_provenance_v1_events_proto_init() {
	if File_proto_scg_provenance_v1_events_proto != nil {
		return
	}
	file_proto_scg_provenance_v1_enums_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_scg_provenance_v1_events_proto_rawDesc), len(file_proto_scg_provenance_v1_events_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_scg_provenance_v1_events_proto_goTypes,
		DependencyIndexes: file_proto_scg_provenance_v1_events_proto_depIdxs,
		MessageInfos:      file_proto_scg_provenance_v1_events_proto_msgTypes,
	}.Build()
	File_proto_scg_provenance_v1_events_proto = out.File
	file_proto_scg_provenance_v1_events_proto_goTypes = nil
	file_proto_scg_provenance_v1_events_proto_depIdxs = nil
}
